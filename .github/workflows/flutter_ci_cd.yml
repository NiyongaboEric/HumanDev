name: Flutter CI-CD

on:
  push:
    branches: [ "main","dev" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Flutter dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.pub-cache
            ~/flutter/.pub-cache
            ~/android/.gradle/caches
            ~/android/.gradle/wrapper
          key: ${{ runner.os }}-pub-gradle-${{ hashFiles('**/*.yaml') }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          # flutter-version: '3.16.x'
          channel: "stable"

      - name: Install dependencies
        run: dart pub get

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      # - name: Analyze project source
      #   run: dart analyze

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      # - name: Run tests
      #   run: dart test

      - name: Generate constants file
        run: |
          echo "class ApiConstants {" >> lib/data/constants/constants.dart
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            echo MAIN BRANCH
            echo "static const String baseAuthUrl = 'https://dev.auth.seymo.ai';" >> lib/data/constants/constants.dart
          else
            echo DEV BRANCH
            echo "static const String baseAuthUrl = 'https://dev.auth.seymo.ai';" >> lib/data/constants/constants.dart
          fi
          echo "}" >> lib/data/constants/constants.dart

      - name: Get app version
        run: |
          APP_VERSION=$(grep -oP 'version: \K(.+)' pubspec.yaml)
          echo "App Version: $APP_VERSION"
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

      - name: Build APK
        run: flutter build apk --release

      - name: Rename APK
        run: mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/seymo_v$APP_VERSION.apk

      - name: Check files in folder
        run: |
          ls build/app/outputs/flutter-apk

      - name: Upload APK
        uses: actions/upload-artifact@v2
        with:
          name: seymo_v$APP_VERSION
          path: build/app/outputs/flutter-apk/seymo_v${{ env.APP_VERSION }}.apk

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
#      - name: Get app version
#        run: |
#          APP_VERSION=${{ steps.create_release.outputs.upload_url }}
#          echo "App Version [release]: $APP_VERSION"
#          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APP_VERSION: ${{ needs.build.outputs.APP_VERSION }}
        with:
          tag_name: v${{ env.APP_VERSION }}
          release_name: Release ${{ env.APP_VERSION }}
          draft: false
          prerelease: false

      - name: Upload APKs to Release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APP_VERSION: ${{ needs.build.outputs.APP_VERSION }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/
          asset_name: seymo_v${{ env.APP_VERSION }}.apk
          asset_content_type: application/vnd.android.package-archive