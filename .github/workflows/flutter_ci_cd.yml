name: Flutter CI-CD

on:
  push:
    branches: [ "main","dev" ]

jobs:
  build:
    if: "(contains(github.event.head_commit.message, 'merge') || contains(github.event.head_commit.message, 'Merge') || contains(github.event.head_commit.message, 'MERGE') || startsWith(github.event.head_commit.message, 'Merge')) == false"
    runs-on: ubuntu-latest

    outputs:
      appVersion: ${{ steps.get-app-version.outputs.appVersion }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Flutter dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.pub-cache
            ~/flutter/.pub-cache
            ~/android/.gradle/caches
            ~/android/.gradle/wrapper
          key: ${{ runner.os }}-pub-gradle-${{ hashFiles('**/*.yaml') }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          # flutter-version: '3.16.x'
          channel: "stable"

      - name: Install dependencies
        run: dart pub get

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      # - name: Analyze project source
      #   run: dart analyze

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      # - name: Run tests
      #   run: dart test

      - name: Generate constants file
        env:
          PROD_AUTH_URL: ${{ vars.PROD_AUTH_URL }}
          DEV_AUTH_URL: ${{ vars.DEV_AUTH_URL }}
        run: |
          echo "class ApiConstants {" >> lib/data/constants/constants.dart
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            echo MAIN BRANCH URL $PROD_AUTH_URL
            echo "static const String baseAuthUrl = '$PROD_AUTH_URL';" >> lib/data/constants/constants.dart
          else
            echo DEV BRANCH URL $DEV_AUTH_URL
            echo "static const String baseAuthUrl = '$DEV_AUTH_URL';" >> lib/data/constants/constants.dart
          fi
          echo "}" >> lib/data/constants/constants.dart

      - name: Get app version
        id: get-app-version
        run: |
          APP_VERSION=$(grep -oP 'version: \K(.+)' pubspec.yaml)
          echo "App Version: $APP_VERSION"
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "appVersion=$APP_VERSION" >> $GITHUB_OUTPUT

      - name: Build APK
        env:
          BUILD_NUMBER: ${{ github.run_number }}
        run: |
          echo "APP BUILD NUMBER: $BUILD_NUMBER"
          flutter build apk --release --build-number=$BUILD_NUMBER

      - name: Rename APK
        run: mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/seymo.apk

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: build/app/outputs/flutter-apk/seymo.apk

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download APKs
        uses: actions/download-artifact@v4
        with:
          name: app-release
          path: build/app/outputs/flutter-apk/

      - name: Create Release and Upload APK to Release
        id: create_and_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_REPOSITORY: my_gh_org/my_gh_repo
          appVersion: ${{ needs.build.outputs.appVersion }}
        with:
          files: build/app/outputs/flutter-apk/seymo.apk
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Release v${{ env.appVersion }}
          tag_name: v${{ env.appVersion }}
          draft: false
          prerelease: false

      - name: Get release information
        id: release_info
        run: |
          release_data=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/HumanDevIP/Pay-FrontEnd-MobileApp/releases/latest")
          download_url=$(echo "$release_data" | jq -r '.assets[0].browser_download_url')
          echo "Download URL: $download_url"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: HumanDevIP/SeymoAI-Website
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main

      - name: Merge from main
        env:
          appVersion: ${{ needs.build.outputs.appVersion }}
        run: |
          git checkout main
          git pull
          git checkout SP-DeployApp
          git merge main

      - name: Remove old APK from target repository
        run: |
          mkdir -p public/app
          rm -f public/app/seymo.apk

      - name: Download APK to target repository
        uses: actions/download-artifact@v4
        with:
          name: app-release
          path: public/app/

      - name: Commit and push changes to target repository
        env:
          appVersion: ${{ needs.build.outputs.appVersion }}
        run: |
          ls public/app
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Update APK to version ${{ env.appVersion }}"
          git push
          git checkout main

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        env:
          appVersion: ${{ needs.build.outputs.appVersion }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Update APK to version ${{ env.appVersion }}"
          body: "Automated changes - This pull request updates the APK file to version ${{ env.appVersion }}"
          base: "main"
          branch: "SP-DeployApp"
          branch-suffix: random

      - name: Merge Pull Request
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.number;
            const octokit = github.getOctokit('${{ secrets.GITHUB_TOKEN }}');
            await octokit.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
#            const pullRequest = context.payload.workflow_run.pull_requests[0]
#            const repository = context.repo
#
#            await github.rest.pulls.merge({
#                    merge_method: "merge",
#                    owner: repository.owner,
#                    pull_number: pullRequest.number,
#                    repo: repository.repo})